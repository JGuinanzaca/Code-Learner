[
    {
        "topic": "Functions I",
        "basic": "a function is an action that the computer can do to accomplish something. whenever we want a computer to do something, we'll use a function that does that specific action we want done.<br>you might think: \"well how many functions are there??\" and I'm happy to tell you there are an infinite number of possible functions!<br>and so you might think: \"how am i gonna learn an infinite number of functions!?!?\"<br>well no worries, you don't have to learn them all! you just need to learn the important ones, which we will cover in this curriculum.",
        "langu": {
            "python": "<h5>print()</h5>the print function allows us to output a message into the console. we can make a message by typing anything in between two quotation marks, and then putting it all inside of the parentheses of our function print().<br><br>we can print out a message using python by typing: <h6>print(\"Hello World\")</h6>Python is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple print() functions. <br>lets type a new message: <h6>print(\"Hello World\")<br>print(\"This is my first Python project! Coding is so cool!\")</h6>input()<br><br>the input function allows us to type a message into the console from the console. <br>we can make our computer to ask us something by typing: <h6>input(\"Type something here: \")</h6>the computer will let us type something in, but we have a problem: computers are really dumb. computers can only be as smart as you code them to be! so we must use a variable to store the information we want the computer to remember. <br><br>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is come up with a good variable name, and then use an =, also called an assignment operator, to give it information. <br>here's an example: <h6>variableName = input(\"Type something here: \")</h6>now that we know how to use print(), input(), and variables, lets code our computer chat!<br><br>first make the console print a message when the program loads up:<h6>print(\"Hi there, I'm the console.\")</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>myName = input(\"What's your name? \")</h6>we can now use our variable myName to make our computer say our name!<h6>print(\"Nice to meet you \" + myName)</h6>when put all together, here's what all your code should look like: <h6>print(\"Hi, I'm the console.\")<br>myName = input(\"Whats your name?\")<br>print(\"Nice to meet you\" + myName)</h6>",
            "javascript": "<h5>console.log()</h5>the console.log function allows us to output a message into the browser console. we can make a message by typing anything in between two quotation marks, and then putting it all inside of the parentheses of our function console.log().<br><br>we can print out a message using javascript by typing: <h6>console.log(\"Hello World\");</h6>JavaScript is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple console.log() functions. <br>lets type a new message: <h6>console.log(\"Hello World\");<br>console.log(\"This is my first JavaScript project! Coding is so cool!\");</h6><h5>prompt()</h5>the prompt function allows us to display a message and let the user type something in. <br>we can make our computer ask us something by typing: <h6>prompt(\"Type something here: \");</h6>the computer will let us type something in, but to remember it, we must use a variable. <br><br>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is come up with a good variable name, then use an = (assignment operator) to give it information. <br>here's an example: <h6>let variableName = prompt(\"Type something here: \");</h6>now that we know how to use console.log(), prompt(), and variables, lets code our browser chat!<br><br>first make the console print a message when the program loads up:<h6>console.log(\"Hi there, I'm JavaScript.\");</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>let myName = prompt(\"What's your name? \");</h6>we can now use our variable myName to make our computer say our name!<h6>console.log(\"Nice to meet you \" + myName);</h6>when put all together, here's what all your code should look like: <h6>console.log(\"Hi, I'm JavaScript.\");<br>let myName = prompt(\"Whats your name?\");<br>console.log(\"Nice to meet you\" + myName);</h6>",
            "cpp": "<h5>cout</h5>the cout function allows us to output a message into the console. we can make a message by typing anything in between two quotation marks, and then putting it after the << operator.<br><br>we can print out a message using c++ by typing: <h6>cout &lt;&lt; \"Hello World\" &lt;&lt; endl;</h6>C++ is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple cout statements. <br>lets type a new message: <h6>cout &lt;&lt; \"Hello World\" &lt;&lt; endl;<br>cout &lt;&lt; \"This is my first C++ project! Coding is so cool!\" &lt;&lt; endl;</h6><h5>cin</h5>the cin object allows us to take input from the console. <br>we can make our computer ask us something by first printing a message, then using cin to store what we type into a variable. <br>here's an example: <h6>string variableName;<br>cout &lt;&lt; \"Type something here: \";<br>cin &gt;&gt; variableName;</h6>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is declare its type (like string or int), give it a name, and then assign it a value.<br><br>now that we know how to use cout, cin, and variables, lets code our computer chat!<br><br>first make the console print a message when the program loads up:<h6>cout &lt;&lt; \"Hi there, I'm the console.\" &lt;&lt; endl;</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>string myName;<br>cout &lt;&lt; \"What's your name? \";<br>cin &gt;&gt; myName;</h6>we can now use our variable myName to make our computer say our name!<h6>cout &lt;&lt; \"Nice to meet you \" &lt;&lt; myName &lt;&lt; endl;</h6>when put all together, here's what all your code should look like: <h6>#include &lt;iostream&gt;<br>using namespace std;<br>int main() {<br>cout &lt;&lt; \"Hi, I'm the console.\" &lt;&lt; endl;<br>string myName;<br>cout &lt;&lt; \"Whats your name? \";<br>cin &gt;&gt; myName;<br>cout &lt;&lt; \"Nice to meet you \" &lt;&lt; myName &lt;&lt; endl;<br>return 0;<br>}</h6>"
        }
    },
    {
        "topic": "Variables & Data Types",
        "basic": "<h5>what are variables</h5>in the last section, we reviewed a little bit about variables. we said variables are containers that hold any information that we want the computer to remember. we can store many different kinds of information inside of a variable including numbers, words, lists, pictures, booleans, all kinds of things!<br><br>the most important thing to always remember about variables is that they are memory containers that our computers use to remember important information so that we can use it again later!",
        "langu": {
            "python": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using print statements.<br><br>lets call our variables: name, age, and favMovie:<h6># create three variables<br>name = \"Dia\"<br>age = 24<br>favMovie = \"Everything, Everywhere, All at Once.\"<br><br>print(name)<br>print(age)<br>print(favMovie)</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6># create three variables<br>vari = \"Dia\"<br>vari = 24<br>vari = \"Everything, Everywhere, All at Once.\"<br><br>print(vari)<br>print(vari)<br>print(vari)</h6><h6>Output:<br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>age = 24<br>age = 17<br><br>print(age)</h6><h6>Output:<br>17<br></h6>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to acheiving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<h6>Text Type: str, char ‚Äî str: string, char: character<br>Numeric Types: int, float ‚Äî int: integer, float: decimal<br>Sequence Types: list, range ‚Äî list: list, range: list of numbers<br>Boolean Type: bool ‚Äî bool: true or false<br>Set Types: set ‚Äî set: set<br>Mapping Type: dict ‚Äî dict: dictionary</h6>let's make variables of all these different data types!<h6># most important data types to memorize<br>name = \"Dia \"    # string data type<br>age = 24           # int data type<br>pi = 3.1415926     # float data type<br>isSkyBlue = True   # bool data type<br>doPigsFly = False  # bool data type<br><br># will become more important later on<br>char = 'a'                         # char data type<br>x = range(10)                      # range data type<br>groceryList = [\"apples\", \"milk\", \"eggs\"]    # list of strings<br>setOfFruit = {\"apple\", \"banana\", \"cherry\"}  # set of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia ' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the number value True to the variable isSkyBlue.<br>* We're assigning the truth value False to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the type() function inside of a print() statement to get the answer.<h6>age = 24  # int data type<br><br>print(type(age))</h6><h6>Output:<br>&lt;class 'int'&gt;",
            "javascript": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using console.log statements.<br><br>lets call our variables: name, age, and favMovie:<h6>// create three variables<br>let name = \"Dia\";<br>let age = 24;<br>let favMovie = \"Everything, Everywhere, All at Once.\";<br><br>console.log(name);<br>console.log(age);<br>console.log(favMovie);</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6>// create three variables<br>let vari = \"Dia\";<br>vari = 24;<br>vari = \"Everything, Everywhere, All at Once.\";<br><br>console.log(vari);<br>console.log(vari);<br>console.log(vari);</h6><h6>Output:<br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>let age = 24;<br>age = 17;<br><br>console.log(age);</h6><h6>Output:<br>17<br></h6>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to achieving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<h6>Text Type: string, char ‚Äî string: text, char: single character<br>Numeric Types: number ‚Äî number: integer or decimal<br>Boolean Type: boolean ‚Äî boolean: true or false<br>Object Type: object ‚Äî key/value pairs<br>Array Type: array ‚Äî list of items</h6>let's make variables of all these different data types!<h6>// most important data types to memorize<br>let name = \"Dia\";                  // string data type<br>let age = 24;                       // number data type<br>let pi = 3.1415926;                 // number data type (decimal)<br>let isSkyBlue = true;               // boolean data type<br>let doPigsFly = false;              // boolean data type<br><br>// will become more important later on<br>let char = 'a';                     // char data type (string of length 1)<br>let x = [...Array(10).keys()];      // array of numbers 0‚Äì9<br>let groceryList = [\"apples\", \"milk\", \"eggs\"];  // array of strings<br>let setOfFruit = new Set([\"apple\", \"banana\", \"cherry\"]);  // set of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the boolean value true to the variable isSkyBlue.<br>* We're assigning the boolean value false to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the typeof operator inside of a console.log() statement to get the answer.<h6>let age = 24;  // number data type<br><br>console.log(typeof age);</h6><h6>Output:<br>number",
            "cpp": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using cout statements.<br><br>lets call our variables: name, age, and favMovie:<h6>// create three variables<br>std::string name = \"Dia\";<br>int age = 24;<br>std::string favMovie = \"Everything, Everywhere, All at Once.\";<br><br>std::cout &lt;&lt; name &lt;&lt; std::endl;<br>std::cout &lt;&lt; age &lt;&lt; std::endl;<br>std::cout &lt;&lt; favMovie &lt;&lt; std::endl;</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6>// create three variables<br>std::string vari = \"Dia\";<br>vari = \"24\";<br>vari = \"Everything, Everywhere, All at Once.\";<br><br>std::cout &lt;&lt; vari &lt;&lt; std::endl;<br>std::cout &lt;&lt; vari &lt;&lt; std::endl;<br>std::cout &lt;&lt; vari &lt;&lt; std::endl;</h6><h6>Output:<br>Everything, Everywhere, All at once.</h6>Everything, Everywhere, All at once.</h6>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>int age = 24;<br>age = 17;<br><br>std::cout &lt;&lt; age &lt;&lt; std::endl;</h6><h6>Output:<br>17<br>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to achieving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<br>Text Type: std::string, char ‚Äî std::string: string, char: single character<br>Numeric Types: int, double ‚Äî int: integer, double: decimal<br>Boolean Type: bool ‚Äî bool: true or false<br>Array Type: array ‚Äî array: list of items<br><br>let's make variables of all these different data types!<h6>// most important data types to memorize<br>std::string name = \"Dia\";            // string data type<br>int age = 24;                          // int data type<br>double pi = 3.1415926;                 // double (float) data type<br>bool isSkyBlue = true;                 // bool data type<br>bool doPigsFly = false;                // bool data type<br><br>// will become more important later on<br>char letter = 'a';                      // char data type<br>int numbers[10];                       // array of ints<br>std::string groceryList[3] = {\"apples\", \"milk\", \"eggs\"};  // array of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the boolean value true to the variable isSkyBlue.<br>* We're assigning the boolean value false to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the <code>typeid</code> operator inside of a <code>cout</code> statement to get the answer.<h6>int age = 24;<br><br>std::cout &lt;&lt; typeid(age).name() &lt;&lt; std::endl;</h6><h6>Output:<br>i"
        }
    },
    {
        "topic": "If Statements",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Loops",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Arrays",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Functions II",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Control Flow",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "OOP",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Data Structures",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Algorithms",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    }
]