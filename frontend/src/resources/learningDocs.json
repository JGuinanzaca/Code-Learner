[
    {
        "topic": "Functions I",
        "basic": "a function is an action that the computer can do to accomplish something. whenever we want a computer to do something, we'll use a function that does that specific action we want done.<br>you might think: \"well how many functions are there??\" and I'm happy to tell you there are an infinite number of possible functions!<br>and so you might think: \"how am i gonna learn an infinite number of functions!?!?\"<br>well no worries, you don't have to learn them all! you just need to learn the important ones, which we will cover in this curriculum.",
        "langu": {
            "python": "<h5>print()</h5>the print function allows us to output a message into the console. we can make a message by typing anything in between two quotation marks, and then putting it all inside of the parentheses of our function print().<br><br>we can print out a message using python by typing: <h6>print(\"Hello World\")</h6>Python is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple print() functions. <br>lets type a new message: <h6>print(\"Hello World\")<br>print(\"This is my first Python project! Coding is so cool!\")</h6>input()<br><br>the input function allows us to type a message into the console from the console. <br>we can make our computer to ask us something by typing: <h6>input(\"Type something here: \")</h6>the computer will let us type something in, but we have a problem: computers are really dumb. computers can only be as smart as you code them to be! so we must use a variable to store the information we want the computer to remember. <br><br>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is come up with a good variable name, and then use an =, also called an assignment operator, to give it information. <br>here's an example: <h6>variableName = input(\"Type something here: \")</h6>now that we know how to use print(), input(), and variables, lets code our computer chat!<br><br>first make the console print a message when the program loads up:<h6>print(\"Hi there, I'm the console.\")</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>myName = input(\"What's your name? \")</h6>we can now use our variable myName to make our computer say our name!<h6>print(\"Nice to meet you \" + myName)</h6>when put all together, here's what all your code should look like: <h6>print(\"Hi, I'm the console.\")<br>myName = input(\"Whats your name?\")<br>print(\"Nice to meet you\" + myName)</h6>",
            "javascript": "<h5>console.log()</h5>the console.log function allows us to output a message into the browser console. we can make a message by typing anything in between two quotation marks, and then putting it all inside of the parentheses of our function console.log().<br><br>we can print out a message using javascript by typing: <h6>console.log(\"Hello World\");</h6>JavaScript is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple console.log() functions. <br>lets type a new message: <h6>console.log(\"Hello World\");<br>console.log(\"This is my first JavaScript project! Coding is so cool!\");</h6><h5>prompt()</h5>the prompt function allows us to display a message and let the user type something in. <br>we can make our computer ask us something by typing: <h6>prompt(\"Type something here: \");</h6>the computer will let us type something in, but to remember it, we must use a variable. <br><br>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is come up with a good variable name, then use an = (assignment operator) to give it information. <br>here's an example: <h6>let variableName = prompt(\"Type something here: \");</h6>now that we know how to use console.log(), prompt(), and variables, lets code our browser chat!<br><br>first make the console print a message when the program loads up:<h6>console.log(\"Hi there, I'm JavaScript.\");</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>let myName = prompt(\"What's your name? \");</h6>we can now use our variable myName to make our computer say our name!<h6>console.log(\"Nice to meet you \" + myName);</h6>when put all together, here's what all your code should look like: <h6>console.log(\"Hi, I'm JavaScript.\");<br>let myName = prompt(\"Whats your name?\");<br>console.log(\"Nice to meet you\" + myName);</h6>",
            "cpp": "<h5>cout</h5>the cout function allows us to output a message into the console. we can make a message by typing anything in between two quotation marks, and then putting it after the << operator.<br><br>we can print out a message using c++ by typing: <h6>cout &lt;&lt; \"Hello World\" &lt;&lt; endl;</h6>C++ is run one line at a time, from top to bottom.<br>We can print multiple messages by using multiple cout statements. <br>lets type a new message: <h6>cout &lt;&lt; \"Hello World\" &lt;&lt; endl;<br>cout &lt;&lt; \"This is my first C++ project! Coding is so cool!\" &lt;&lt; endl;</h6><h5>cin</h5>the cin object allows us to take input from the console. <br>we can make our computer ask us something by first printing a message, then using cin to store what we type into a variable. <br>here's an example: <h6>string variableName;<br>cout &lt;&lt; \"Type something here: \";<br>cin &gt;&gt; variableName;</h6>btw: variables are containers that hold any information that we want the computer to remember.<br><br>making a variable is very easy! all we have to do is declare its type (like string or int), give it a name, and then assign it a value.<br><br>now that we know how to use cout, cin, and variables, lets code our computer chat!<br><br>first make the console print a message when the program loads up:<h6>cout &lt;&lt; \"Hi there, I'm the console.\" &lt;&lt; endl;</h6>then have it ask you a question (don't forget to save your answer with variables):<h6>string myName;<br>cout &lt;&lt; \"What's your name? \";<br>cin &gt;&gt; myName;</h6>we can now use our variable myName to make our computer say our name!<h6>cout &lt;&lt; \"Nice to meet you \" &lt;&lt; myName &lt;&lt; endl;</h6>when put all together, here's what all your code should look like: <h6>#include &lt;iostream&gt;<br>using namespace std;<br>int main() {<br>cout &lt;&lt; \"Hi, I'm the console.\" &lt;&lt; endl;<br>string myName;<br>cout &lt;&lt; \"Whats your name? \";<br>cin &gt;&gt; myName;<br>cout &lt;&lt; \"Nice to meet you \" &lt;&lt; myName &lt;&lt; endl;<br>return 0;<br>}</h6>"
        }
    },
    {
        "topic": "Variables & Data Types",
        "basic": "<h5>what are variables</h5>in the last section, we reviewed a little bit about variables. we said variables are containers that hold any information that we want the computer to remember. we can store many different kinds of information inside of a variable including numbers, words, lists, pictures, booleans, all kinds of things!<br><br>the most important thing to always remember about variables is that they are memory containers that our computers use to remember important information so that we can use it again later!",
        "langu": {
            "python": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using print statements.<br><br>lets call our variables: name, age, and favMovie:<h6># create three variables<br>name = \"Dia\"<br>age = 24<br>favMovie = \"Everything, Everywhere, All at Once.\"<br><br>print(name)<br>print(age)<br>print(favMovie)</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6># create three variables<br>vari = \"Dia\"<br>vari = 24<br>vari = \"Everything, Everywhere, All at Once.\"<br><br>print(vari)<br>print(vari)<br>print(vari)</h6><h6>Output:<br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>age = 24<br>age = 17<br><br>print(age)</h6><h6>Output:<br>17<br></h6>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to acheiving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<h6>Text Type: str, char ‚Äî str: string, char: character<br>Numeric Types: int, float ‚Äî int: integer, float: decimal<br>Sequence Types: list, range ‚Äî list: list, range: list of numbers<br>Boolean Type: bool ‚Äî bool: true or false<br>Set Types: set ‚Äî set: set<br>Mapping Type: dict ‚Äî dict: dictionary</h6>let's make variables of all these different data types!<h6># most important data types to memorize<br>name = \"Dia \"    # string data type<br>age = 24           # int data type<br>pi = 3.1415926     # float data type<br>isSkyBlue = True   # bool data type<br>doPigsFly = False  # bool data type<br><br># will become more important later on<br>char = 'a'                         # char data type<br>x = range(10)                      # range data type<br>groceryList = [\"apples\", \"milk\", \"eggs\"]    # list of strings<br>setOfFruit = {\"apple\", \"banana\", \"cherry\"}  # set of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia ' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the number value True to the variable isSkyBlue.<br>* We're assigning the truth value False to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the type() function inside of a print() statement to get the answer.<h6>age = 24  # int data type<br><br>print(type(age))</h6><h6>Output:<br>&lt;class 'int'&gt;</h6>",
            "javascript": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using console.log statements.<br><br>lets call our variables: name, age, and favMovie:<h6>// create three variables<br>let name = \"Dia\";<br>let age = 24;<br>let favMovie = \"Everything, Everywhere, All at Once.\";<br><br>console.log(name);<br>console.log(age);<br>console.log(favMovie);</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6>// create three variables<br>let vari = \"Dia\";<br>vari = 24;<br>vari = \"Everything, Everywhere, All at Once.\";<br><br>console.log(vari);<br>console.log(vari);<br>console.log(vari);</h6><h6>Output:<br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once. <br>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>let age = 24;<br>age = 17;<br><br>console.log(age);</h6><h6>Output:<br>17<br></h6>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to achieving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<h6>Text Type: string, char ‚Äî string: text, char: single character<br>Numeric Types: number ‚Äî number: integer or decimal<br>Boolean Type: boolean ‚Äî boolean: true or false<br>Object Type: object ‚Äî key/value pairs<br>Array Type: array ‚Äî list of items</h6>let's make variables of all these different data types!<h6>// most important data types to memorize<br>let name = \"Dia\";                  // string data type<br>let age = 24;                       // number data type<br>let pi = 3.1415926;                 // number data type (decimal)<br>let isSkyBlue = true;               // boolean data type<br>let doPigsFly = false;              // boolean data type<br><br>// will become more important later on<br>let char = 'a';                     // char data type (string of length 1)<br>let x = [...Array(10).keys()];      // array of numbers 0‚Äì9<br>let groceryList = [\"apples\", \"milk\", \"eggs\"];  // array of strings<br>let setOfFruit = new Set([\"apple\", \"banana\", \"cherry\"]);  // set of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the boolean value true to the variable isSkyBlue.<br>* We're assigning the boolean value false to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the typeof operator inside of a console.log() statement to get the answer.<h6>let age = 24;  // number data type<br><br>console.log(typeof age);</h6><h6>Output:<br>number</h6>",
            "cpp": "<h5>creating variables</h5>lets code a program that saves our name, age, and favorite movie into 3 different variables. then, lets print out our variables using cout statements.<br><br>lets call our variables: name, age, and favMovie:<h6>// create three variables<br>std::string name = \"Dia\";<br>int age = 24;<br>std::string favMovie = \"Everything, Everywhere, All at Once.\";<br><br>std::cout &lt;&lt; name &lt;&lt; std::endl;<br>std::cout &lt;&lt; age &lt;&lt; std::endl;<br>std::cout &lt;&lt; favMovie &lt;&lt; std::endl;</h6><h6>Output:<br>Dia<br>24<br>Everything, Everywhere, All at once.</h6><br>but what if we only used one variable, called vari for all of them? our code:<h6>// create three variables<br>std::string vari = \"Dia\";<br>vari = \"24\";<br>vari = \"Everything, Everywhere, All at Once.\";<br><br>std::cout &lt;&lt; vari &lt;&lt; std::endl;<br>std::cout &lt;&lt; vari &lt;&lt; std::endl;<br>std::cout &lt;&lt; vari &lt;&lt; std::endl;</h6><h6>Output:<br>Everything, Everywhere, All at once.<br>Everything, Everywhere, All at once.<br>Everything, Everywhere, All at once.</h6><br>we get the same answer over and over again?!?!<br><h5>different names == different variables</h5>whenever we make a variable, we give it a variable name. the variable name is how you, me, and the computer, can tell it apart from other variables. for that reason, we are not allowed to use the same name for two different variables.<br><br>if we use the same name twice, we change the information saved inside of the variable with whatever information we typed in the second time.<br><br>every time we create a new variable, we must use a new, unique, name that we have not used in our program, or else we will be overwriting the information we had saved before.<br><h5>did you know variables don't have to stay the same forever?</h5>you're telling me there's a variety of ways that variables can vary?<br><br>we cannot use the same variable name for two different variables, but we can in fact use the name over and over again if we want to make a change to the variable.<br><br>watch this:<h6>int age = 24;<br>age = 17;<br><br>std::cout &lt;&lt; age &lt;&lt; std::endl;</h6><h6>Output:<br>17</h6>just by changing the value stored in the variable age, I JUST TURNED 17 AGAIN‚Ä¶!?<br>‚Ä¶YUUUUPPP! üôÇ‚Äç‚ÜïÔ∏è It's that easy! scientists worldwide are stunned at the simplicity this programmer had when it came to achieving eternal youth, but all it took was two lines of code.<br><h5>what's my type?</h5>everyday people ask what's their type of music, color, book, person, anything and everything at all. you know who doesn't have a hard time figuring that out? data.<br><br>what's my blood type? üôÇ‚Äç‚ÜîÔ∏è nah‚Ä¶‚Ä¶ what's my data type! üôÇ‚Äç‚ÜïÔ∏è<br><br>computers have categories for the kinds of information they remember. these categories are called data types.<br>we know that variables can store any information, so that means it can store many different types of information (aka data). different types of data can allow you to do different things in your code. thats why data types are an important concept to learn.<br><br>here are the main data types:<h6>Text Type: std::string, char ‚Äî std::string: string, char: single character<br>Numeric Types: int, double ‚Äî int: integer, double: decimal<br>Boolean Type: bool ‚Äî bool: true or false<br>Array Type: array ‚Äî array: list of items</h6>let's make variables of all these different data types!<h6>// most important data types to memorize<br>std::string name = \"Dia\";            // string data type<br>int age = 24;                          // int data type<br>double pi = 3.1415926;                 // double (float) data type<br>bool isSkyBlue = true;                 // bool data type<br>bool doPigsFly = false;                // bool data type<br><br>// will become more important later on<br>char letter = 'a';                      // char data type<br>int numbers[10];                       // array of ints<br>std::string groceryList[3] = {\"apples\", \"milk\", \"eggs\"};  // array of strings</h6>The = single equal sign means it's an assignment operator, which lets the computer know we're assigning values to variables.<br>* We're assigning the string value 'Dia' to the variable name.<br>* We're assigning the number value 24 to the variable age.<br>* We're assigning the number value 3.1415926 to the variable pi.<br>* We're assigning the boolean value true to the variable isSkyBlue.<br>* We're assigning the boolean value false to the variable doPigsFly.<br>* etc. etc.<br><br>if you are ever unsure what data type you are dealing with, you can always double check by using the <code>typeid</code> operator inside of a <code>cout</code> statement to get the answer.<h6>int age = 24;<br><br>std::cout &lt;&lt; typeid(age).name() &lt;&lt; std::endl;</h6><h6>Output:<br>i</h6>"
        }
    },
    {
        "topic": "If Statements",
        "basic": "In times when we want something to only happen <b> if and only if</b> something is true, then we must use <b> if statements </b>. To write an if statement, we need three things: an 'if', a conditional, and an action. The 'if' prompts our console to prepare itself to check if something is true or false. The conditional is the thing we are checking to see if its true or false, and the action is the event that takes place in response to a true. If the conditional is true, an action will occur. Otherwise, that action will not occur.",
        "langu": {
            "python": "<h5>basic if statements</h5>let's start with a simple if statement that checks if someone is old enough to drive:<h6>age = 17<br><br>if age >= 16:<br>    print(\"You can drive!\")</h6><h6>Output:<br>You can drive!</h6>the structure of an if statement in Python is:<br>‚Ä¢ <b>if</b> keyword<br>‚Ä¢ a condition that evaluates to True or False<br>‚Ä¢ a colon (:)<br>‚Ä¢ indented code that runs when the condition is True<br><br><h5>comparison operators</h5>we use these operators to compare values:<h6>== equal to<br>!= not equal to<br>&gt; greater than<br>&lt; less than<br>&gt;= greater than or equal to<br>&lt;= less than or equal to</h6>let's try some examples:<h6>temperature = 75<br><br>if temperature > 80:<br>    print(\"It's hot outside!\")<br><br>if temperature == 75:<br>    print(\"Perfect weather!\")<br><br>if temperature < 32:<br>    print(\"It's freezing!\")</h6><h6>Output:<br>Perfect weather!</h6><h5>if-else statements</h5>sometimes we want something to happen when the condition is false. that's where else comes in:<h6>age = 14<br><br>if age >= 16:<br>    print(\"You can drive!\")<br>else:<br>    print(\"You're too young to drive.\")</h6><h6>Output:<br>You're too young to drive.</h6><h5>if-elif-else statements</h5>when we have multiple conditions to check, we use elif (short for \"else if\"):<h6>grade = 85<br><br>if grade >= 90:<br>    print(\"A - Excellent!\")<br>elif grade >= 80:<br>    print(\"B - Good job!\")<br>elif grade >= 70:<br>    print(\"C - Not bad!\")<br>elif grade >= 60:<br>    print(\"D - You can do better!\")<br>else:<br>    print(\"F - Study harder!\")</h6><h6>Output:<br>B - Good job!</h6>Python checks each condition in order and stops at the first one that's True.",
            "javascript": "<h5>basic if statements</h5>let's start with a simple if statement that checks if someone is old enough to drive:<h6>let age = 17;<br><br>if (age >= 16) {<br>    console.log(\"You can drive!\");<br>}</h6><h6>Output:<br>You can drive!</h6>the structure of an if statement in JavaScript is:<br>‚Ä¢ <b>if</b> keyword<br>‚Ä¢ parentheses () containing a condition<br>‚Ä¢ curly braces {} containing code that runs when the condition is true<br><br><h5>comparison operators</h5>we use these operators to compare values:<h6>== equal to (loose equality)<br>=== equal to (strict equality)<br>!= not equal to (loose)<br>!== not equal to (strict)<br>&gt; greater than<br>&lt; less than<br>&gt;= greater than or equal to<br>&lt;= less than or equal to</h6>let's try some examples:<h6>let temperature = 75;<br><br>if (temperature > 80) {<br>    console.log(\"It's hot outside!\");<br>}<br><br>if (temperature === 75) {<br>    console.log(\"Perfect weather!\");<br>}<br><br>if (temperature < 32) {<br>    console.log(\"It's freezing!\");<br>}</h6><h6>Output:<br>Perfect weather!</h6><h5>if-else statements</h5>sometimes we want something to happen when the condition is false. that's where else comes in:<h6>let age = 14;<br><br>if (age >= 16) {<br>    console.log(\"You can drive!\");<br>} else {<br>    console.log(\"You're too young to drive.\");<br>}</h6><h6>Output:<br>You're too young to drive.</h6><h5>if-else if-else statements</h5>when we have multiple conditions to check, we use else if:<h6>let grade = 85;<br><br>if (grade >= 90) {<br>    console.log(\"A - Excellent!\");<br>} else if (grade >= 80) {<br>    console.log(\"B - Good job!\");<br>} else if (grade >= 70) {<br>    console.log(\"C - Not bad!\");<br>} else if (grade >= 60) {<br>    console.log(\"D - You can do better!\");<br>} else {<br>    console.log(\"F - Study harder!\");<br>}</h6><h6>Output:<br>B - Good job!</h6>JavaScript checks each condition in order and stops at the first one that's true.",
            "cpp": "<h5>basic if statements</h5>let's start with a simple if statement that checks if someone is old enough to drive:<h6>int age = 17;<br><br>if (age >= 16) {<br>    std::cout &lt;&lt; \"You can drive!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>You can drive!</h6>the structure of an if statement in C++ is:<br>‚Ä¢ <b>if</b> keyword<br>‚Ä¢ parentheses () containing a condition<br>‚Ä¢ curly braces {} containing code that runs when the condition is true<br><br><h5>comparison operators</h5>we use these operators to compare values:<h6>== equal to<br>!= not equal to<br>&gt; greater than<br>&lt; less than<br>&gt;= greater than or equal to<br>&lt;= less than or equal to</h6>let's try some examples:<h6>int temperature = 75;<br><br>if (temperature > 80) {<br>    std::cout &lt;&lt; \"It's hot outside!\" &lt;&lt; std::endl;<br>}<br><br>if (temperature == 75) {<br>    std::cout &lt;&lt; \"Perfect weather!\" &lt;&lt; std::endl;<br>}<br><br>if (temperature < 32) {<br>    std::cout &lt;&lt; \"It's freezing!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>Perfect weather!</h6><h5>if-else statements</h5>sometimes we want something to happen when the condition is false. that's where else comes in:<h6>int age = 14;<br><br>if (age >= 16) {<br>    std::cout &lt;&lt; \"You can drive!\" &lt;&lt; std::endl;<br>} else {<br>    std::cout &lt;&lt; \"You're too young to drive.\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>You're too young to drive.</h6><h5>if-else if-else statements</h5>when we have multiple conditions to check, we use else if:<h6>int grade = 85;<br><br>if (grade >= 90) {<br>    std::cout &lt;&lt; \"A - Excellent!\" &lt;&lt; std::endl;<br>} else if (grade >= 80) {<br>    std::cout &lt;&lt; \"B - Good job!\" &lt;&lt; std::endl;<br>} else if (grade >= 70) {<br>    std::cout &lt;&lt; \"C - Not bad!\" &lt;&lt; std::endl;<br>} else if (grade >= 60) {<br>    std::cout &lt;&lt; \"D - You can do better!\" &lt;&lt; std::endl;<br>} else {<br>    std::cout &lt;&lt; \"F - Study harder!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>B - Good job!</h6>C++ checks each condition in order and stops at the first one that's true."
        }
    },
    {
        "topic": "Loops",
        "basic": "loops are used when we want to repeat code multiple times. instead of writing the same code over and over again, we can use loops to make our computer do repetitive tasks automatically! there are different types of loops, but they all have the same purpose: to repeat code until a certain condition is met.",
        "langu": {
            "python": "<h5>for loops</h5>for loops are great when you know exactly how many times you want to repeat something:<h6>for i in range(5):<br>    print(\"Hello World!\")</h6><h6>Output:<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!</h6>the range() function creates a sequence of numbers. range(5) gives us 0, 1, 2, 3, 4.<br><br>we can also use the loop variable (i) in our code:<h6>for i in range(5):<br>    print(f\"This is loop number {i}\")</h6><h6>Output:<br>This is loop number 0<br>This is loop number 1<br>This is loop number 2<br>This is loop number 3<br>This is loop number 4</h6><h5>range() with different arguments</h5>range() can take up to 3 arguments:<h6># range(start, stop)<br>for i in range(1, 6):<br>    print(i)<br><br># range(start, stop, step)<br>for i in range(0, 10, 2):<br>    print(i)</h6><h6>Output:<br>1<br>2<br>3<br>4<br>5<br>0<br>2<br>4<br>6<br>8</h6><h5>while loops</h5>while loops continue as long as a condition is true:<h6>count = 0<br><br>while count < 5:<br>    print(f\"Count is {count}\")<br>    count = count + 1<br><br>print(\"Done!\")</h6><h6>Output:<br>Count is 0<br>Count is 1<br>Count is 2<br>Count is 3<br>Count is 4<br>Done!</h6>be careful with while loops! if the condition never becomes false, you'll create an infinite loop.<br><br><h5>looping through lists</h5>we can loop through items in a list:<h6>fruits = [\"apple\", \"banana\", \"cherry\"]<br><br>for fruit in fruits:<br>    print(f\"I love {fruit}s!\")</h6><h6>Output:<br>I love apples!<br>I love bananas!<br>I love cherrys!</h6>",
            "javascript": "<h5>for loops</h5>for loops are great when you know exactly how many times you want to repeat something:<h6>for (let i = 0; i < 5; i++) {<br>    console.log(\"Hello World!\");<br>}</h6><h6>Output:<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!</h6>the structure is: for (initialization; condition; increment)<br>‚Ä¢ initialization: let i = 0 (start at 0)<br>‚Ä¢ condition: i < 5 (continue while i is less than 5)<br>‚Ä¢ increment: i++ (add 1 to i after each loop)<br><br>we can use the loop variable (i) in our code:<h6>for (let i = 0; i < 5; i++) {<br>    console.log(`This is loop number ${i}`);<br>}</h6><h6>Output:<br>This is loop number 0<br>This is loop number 1<br>This is loop number 2<br>This is loop number 3<br>This is loop number 4</h6><h5>different for loop patterns</h5>we can start at different numbers and use different increments:<h6>// start at 1, go to 5<br>for (let i = 1; i <= 5; i++) {<br>    console.log(i);<br>}<br><br>// count by 2s<br>for (let i = 0; i < 10; i += 2) {<br>    console.log(i);<br>}</h6><h6>Output:<br>1<br>2<br>3<br>4<br>5<br>0<br>2<br>4<br>6<br>8</h6><h5>while loops</h5>while loops continue as long as a condition is true:<h6>let count = 0;<br><br>while (count < 5) {<br>    console.log(`Count is ${count}`);<br>    count = count + 1;<br>}<br><br>console.log(\"Done!\");</h6><h6>Output:<br>Count is 0<br>Count is 1<br>Count is 2<br>Count is 3<br>Count is 4<br>Done!</h6>be careful with while loops! if the condition never becomes false, you'll create an infinite loop.<br><br><h5>looping through arrays</h5>we can loop through items in an array:<h6>let fruits = [\"apple\", \"banana\", \"cherry\"];<br><br>for (let i = 0; i < fruits.length; i++) {<br>    console.log(`I love ${fruits[i]}s!`);<br>}<br><br>// or use for...of loop<br>for (let fruit of fruits) {<br>    console.log(`I love ${fruit}s!`);<br>}</h6><h6>Output:<br>I love apples!<br>I love bananas!<br>I love cherrys!</h6>",
            "cpp": "<h5>for loops</h5>for loops are great when you know exactly how many times you want to repeat something:<h6>for (int i = 0; i < 5; i++) {<br>    std::cout &lt;&lt; \"Hello World!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!<br>Hello World!</h6>the structure is: for (initialization; condition; increment)<br>‚Ä¢ initialization: int i = 0 (declare i and start at 0)<br>‚Ä¢ condition: i < 5 (continue while i is less than 5)<br>‚Ä¢ increment: i++ (add 1 to i after each loop)<br><br>we can use the loop variable (i) in our code:<h6>for (int i = 0; i < 5; i++) {<br>    std::cout &lt;&lt; \"This is loop number \" &lt;&lt; i &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>This is loop number 0<br>This is loop number 1<br>This is loop number 2<br>This is loop number 3<br>This is loop number 4</h6><h5>different for loop patterns</h5>we can start at different numbers and use different increments:<h6>// start at 1, go to 5<br>for (int i = 1; i <= 5; i++) {<br>    std::cout &lt;&lt; i &lt;&lt; std::endl;<br>}<br><br>// count by 2s<br>for (int i = 0; i < 10; i += 2) {<br>    std::cout &lt;&lt; i &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>1<br>2<br>3<br>4<br>5<br>0<br>2<br>4<br>6<br>8</h6><h5>while loops</h5>while loops continue as long as a condition is true:<h6>int count = 0;<br><br>while (count < 5) {<br>    std::cout &lt;&lt; \"Count is \" &lt;&lt; count &lt;&lt; std::endl;<br>    count = count + 1;<br>}<br><br>std::cout &lt;&lt; \"Done!\" &lt;&lt; std::endl;</h6><h6>Output:<br>Count is 0<br>Count is 1<br>Count is 2<br>Count is 3<br>Count is 4<br>Done!</h6>be careful with while loops! if the condition never becomes false, you'll create an infinite loop.<br><br><h5>looping through arrays</h5>we can loop through items in an array:<h6>std::string fruits[3] = {\"apple\", \"banana\", \"cherry\"};<br><br>for (int i = 0; i < 3; i++) {<br>    std::cout &lt;&lt; \"I love \" &lt;&lt; fruits[i] &lt;&lt; \"s!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>I love apples!<br>I love bananas!<br>I love cherrys!</h6>"
        }
    },
    {
        "topic": "Arrays",
        "basic": "arrays (also called lists in some languages) are containers that can hold multiple pieces of data at once. think of an array like a row of lockers - each locker has a number (called an index) and can store one item. arrays make it easy to store and organize related information together, like a list of names, numbers, or any other data.",
        "langu": {
            "python": "<h5>creating lists</h5>in Python, we call arrays \"lists\" and create them with square brackets:<h6>fruits = [\"apple\", \"banana\", \"cherry\"]<br>numbers = [1, 2, 3, 4, 5]<br>mixed = [\"hello\", 42, True, 3.14]<br><br>print(fruits)<br>print(numbers)<br>print(mixed)</h6><h6>Output:<br>['apple', 'banana', 'cherry']<br>[1, 2, 3, 4, 5]<br>['hello', 42, True, 3.14]</h6><h5>accessing list items</h5>we use index numbers to get specific items from a list. remember, counting starts at 0!<h6>fruits = [\"apple\", \"banana\", \"cherry\"]<br><br>print(fruits[0])  # first item<br>print(fruits[1])  # second item<br>print(fruits[2])  # third item</h6><h6>Output:<br>apple<br>banana<br>cherry</h6><h5>modifying lists</h5>we can change, add, and remove items from lists:<h6>fruits = [\"apple\", \"banana\", \"cherry\"]<br><br># change an item<br>fruits[1] = \"orange\"<br>print(fruits)<br><br># add an item to the end<br>fruits.append(\"grape\")<br>print(fruits)<br><br># remove an item<br>fruits.remove(\"apple\")<br>print(fruits)</h6><h6>Output:<br>['apple', 'orange', 'cherry']<br>['apple', 'orange', 'cherry', 'grape']<br>['orange', 'cherry', 'grape']</h6><h5>list methods</h5>lists have many useful built-in functions:<h6>numbers = [3, 1, 4, 1, 5]<br><br>print(len(numbers))    # length of list<br>print(max(numbers))    # largest number<br>print(min(numbers))    # smallest number<br>print(numbers.count(1)) # count how many 1s<br><br>numbers.sort()         # sort the list<br>print(numbers)</h6><h6>Output:<br>5<br>5<br>1<br>2<br>[1, 1, 3, 4, 5]</h6><h5>looping through lists</h5>we can easily go through every item in a list:<h6>colors = [\"red\", \"green\", \"blue\"]<br><br># method 1: loop through items directly<br>for color in colors:<br>    print(f\"I like {color}\")<br><br># method 2: loop through indexes<br>for i in range(len(colors)):<br>    print(f\"Color {i}: {colors[i]}\")</h6><h6>Output:<br>I like red<br>I like green<br>I like blue<br>Color 0: red<br>Color 1: green<br>Color 2: blue</h6>",
            "javascript": "<h5>creating arrays</h5>in JavaScript, we create arrays with square brackets:<h6>let fruits = [\"apple\", \"banana\", \"cherry\"];<br>let numbers = [1, 2, 3, 4, 5];<br>let mixed = [\"hello\", 42, true, 3.14];<br><br>console.log(fruits);<br>console.log(numbers);<br>console.log(mixed);</h6><h6>Output:<br>['apple', 'banana', 'cherry']<br>[1, 2, 3, 4, 5]<br>['hello', 42, true, 3.14]</h6><h5>accessing array items</h5>we use index numbers to get specific items from an array. remember, counting starts at 0!<h6>let fruits = [\"apple\", \"banana\", \"cherry\"];<br><br>console.log(fruits[0]);  // first item<br>console.log(fruits[1]);  // second item<br>console.log(fruits[2]);  // third item</h6><h6>Output:<br>apple<br>banana<br>cherry</h6><h5>modifying arrays</h5>we can change, add, and remove items from arrays:<h6>let fruits = [\"apple\", \"banana\", \"cherry\"];<br><br>// change an item<br>fruits[1] = \"orange\";<br>console.log(fruits);<br><br>// add an item to the end<br>fruits.push(\"grape\");<br>console.log(fruits);<br><br>// remove the last item<br>fruits.pop();<br>console.log(fruits);</h6><h6>Output:<br>['apple', 'orange', 'cherry']<br>['apple', 'orange', 'cherry', 'grape']<br>['apple', 'orange', 'cherry']</h6><h5>array properties and methods</h5>arrays have many useful built-in properties and functions:<h6>let numbers = [3, 1, 4, 1, 5];<br><br>console.log(numbers.length);    // length of array<br>console.log(numbers.indexOf(4)); // find position of 4<br>console.log(numbers.includes(3)); // check if 3 is in array<br><br>numbers.sort();                 // sort the array<br>console.log(numbers);<br><br>let doubled = numbers.map(x => x * 2); // create new array with each number doubled<br>console.log(doubled);</h6><h6>Output:<br>5<br>2<br>true<br>[1, 1, 3, 4, 5]<br>[2, 2, 6, 8, 10]</h6><h5>looping through arrays</h5>we can easily go through every item in an array:<h6>let colors = [\"red\", \"green\", \"blue\"];<br><br>// method 1: traditional for loop<br>for (let i = 0; i < colors.length; i++) {<br>    console.log(`I like ${colors[i]}`);<br>}<br><br>// method 2: for...of loop<br>for (let color of colors) {<br>    console.log(`I like ${color}`);<br>}</h6><h6>Output:<br>I like red<br>I like green<br>I like blue<br>I like red<br>I like green<br>I like blue</h6>",
            "cpp": "<h5>creating arrays</h5>in C++, we create arrays by specifying the type and size:<h6>// fixed-size arrays<br>int numbers[5] = {1, 2, 3, 4, 5};<br>std::string fruits[3] = {\"apple\", \"banana\", \"cherry\"};<br><br>// print array elements<br>for (int i = 0; i < 5; i++) {<br>    std::cout &lt;&lt; numbers[i] &lt;&lt; \" \";<br>}<br>std::cout &lt;&lt; std::endl;<br><br>for (int i = 0; i < 3; i++) {<br>    std::cout &lt;&lt; fruits[i] &lt;&lt; \" \";<br>}<br>std::cout &lt;&lt; std::endl;</h6><h6>Output:<br>1 2 3 4 5<br>apple banana cherry</h6><h5>accessing array items</h5>we use index numbers to get specific items from an array. remember, counting starts at 0!<h6>std::string fruits[3] = {\"apple\", \"banana\", \"cherry\"};<br><br>std::cout &lt;&lt; fruits[0] &lt;&lt; std::endl;  // first item<br>std::cout &lt;&lt; fruits[1] &lt;&lt; std::endl;  // second item<br>std::cout &lt;&lt; fruits[2] &lt;&lt; std::endl;  // third item</h6><h6>Output:<br>apple<br>banana<br>cherry</h6><h5>modifying arrays</h5>we can change items in arrays (but not easily add or remove):<h6>std::string fruits[3] = {\"apple\", \"banana\", \"cherry\"};<br><br>// change an item<br>fruits[1] = \"orange\";<br><br>// print all items<br>for (int i = 0; i < 3; i++) {<br>    std::cout &lt;&lt; fruits[i] &lt;&lt; \" \";<br>}<br>std::cout &lt;&lt; std::endl;</h6><h6>Output:<br>apple orange cherry</h6><h5>vectors (dynamic arrays)</h5>for more flexibility, we can use vectors from the &lt;vector&gt; library:<h6>#include &lt;vector&gt;<br><br>std::vector&lt;int&gt; numbers = {3, 1, 4, 1, 5};<br><br>std::cout &lt;&lt; numbers.size() &lt;&lt; std::endl;    // size of vector<br><br>numbers.push_back(9);                    // add item to end<br>std::cout &lt;&lt; \"Added 9: \";<br>for (int num : numbers) {<br>    std::cout &lt;&lt; num &lt;&lt; \" \";<br>}<br>std::cout &lt;&lt; std::endl;<br><br>numbers.pop_back();                      // remove last item<br>std::cout &lt;&lt; \"Removed last: \";<br>for (int num : numbers) {<br>    std::cout &lt;&lt; num &lt;&lt; \" \";<br>}<br>std::cout &lt;&lt; std::endl;</h6><h6>Output:<br>5<br>Added 9: 3 1 4 1 5 9<br>Removed last: 3 1 4 1 5</h6><h5>looping through arrays</h5>we can easily go through every item in an array:<h6>std::string colors[3] = {\"red\", \"green\", \"blue\"};<br><br>// traditional for loop<br>for (int i = 0; i < 3; i++) {<br>    std::cout &lt;&lt; \"I like \" &lt;&lt; colors[i] &lt;&lt; std::endl;<br>}<br><br>// range-based for loop (C++11)<br>for (const std::string& color : colors) {<br>    std::cout &lt;&lt; \"I like \" &lt;&lt; color &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>I like red<br>I like green<br>I like blue<br>I like red<br>I like green<br>I like blue</h6>"
        }
    },
    
    {
        "topic": "Functions II",
        "basic": "now that we know what functions are and how to use built-in functions like print() and input(), it's time to learn how to create our own custom functions! creating your own functions is like teaching the computer a new trick that you can use over and over again. functions help us organize our code, avoid repetition, and make our programs easier to read and maintain.",
        "langu": {
            "python": "<h5>creating your first function</h5>let's create a simple function that greets someone:<h6>def greet():<br>    print(\"Hello there!\")<br><br># call the function<br>greet()</h6><h6>Output:<br>Hello there!</h6>the structure is:<br>‚Ä¢ <b>def</b> keyword to define a function<br>‚Ä¢ function name followed by parentheses<br>‚Ä¢ colon (:)<br>‚Ä¢ indented code block<br><br><h5>functions with parameters</h5>parameters let us pass information into our functions:<h6>def greet_person(name):<br>    print(f\"Hello, {name}!\")<br><br>greet_person(\"Alice\")<br>greet_person(\"Bob\")</h6><h6>Output:<br>Hello, Alice!<br>Hello, Bob!</h6><h5>functions with multiple parameters</h5>we can pass multiple pieces of information:<h6>def introduce(name, age):<br>    print(f\"Hi, I'm {name} and I'm {age} years old.\")<br><br>introduce(\"Sarah\", 25)<br>introduce(\"Mike\", 30)</h6><h6>Output:<br>Hi, I'm Sarah and I'm 25 years old.<br>Hi, I'm Mike and I'm 30 years old.</h6><h5>return values</h5>functions can give back (return) a result:<h6>def add_numbers(a, b):<br>    result = a + b<br>    return result<br><br>sum1 = add_numbers(5, 3)<br>sum2 = add_numbers(10, 20)<br><br>print(sum1)<br>print(sum2)</h6><h6>Output:<br>8<br>30</h6><h5>default parameters</h5>we can give parameters default values:<h6>def greet_with_title(name, title=\"friend\"):<br>    print(f\"Hello {title} {name}!\")<br><br>greet_with_title(\"John\")<br>greet_with_title(\"Jane\", \"Dr.\")</h6><h6>Output:<br>Hello friend John!<br>Hello Dr. Jane!</h6><h5>practical example</h5>let's create a calculator function:<h6>def calculator(num1, num2, operation):<br>    if operation == \"add\":<br>        return num1 + num2<br>    elif operation == \"subtract\":<br>        return num1 - num2<br>    elif operation == \"multiply\":<br>        return num1 * num2<br>    elif operation == \"divide\":<br>        return num1 / num2<br>    else:<br>        return \"Invalid operation\"<br><br>result1 = calculator(10, 5, \"add\")<br>result2 = calculator(10, 5, \"multiply\")<br><br>print(f\"10 + 5 = {result1}\")<br>print(f\"10 √ó 5 = {result2}\")</h6><h6>Output:<br>10 + 5 = 15<br>10 √ó 5 = 50</h6>",
            "javascript": "<h5>creating your first function</h5>let's create a simple function that greets someone:<h6>function greet() {<br>    console.log(\"Hello there!\");<br>}<br><br>// call the function<br>greet();</h6><h6>Output:<br>Hello there!</h6>the structure is:<br>‚Ä¢ <b>function</b> keyword<br>‚Ä¢ function name followed by parentheses<br>‚Ä¢ curly braces {} containing the code<br><br><h5>functions with parameters</h5>parameters let us pass information into our functions:<h6>function greetPerson(name) {<br>    console.log(`Hello, ${name}!`);<br>}<br><br>greetPerson(\"Alice\");<br>greetPerson(\"Bob\");</h6><h6>Output:<br>Hello, Alice!<br>Hello, Bob!</h6><h5>functions with multiple parameters</h5>we can pass multiple pieces of information:<h6>function introduce(name, age) {<br>    console.log(`Hi, I'm ${name} and I'm ${age} years old.`);<br>}<br><br>introduce(\"Sarah\", 25);<br>introduce(\"Mike\", 30);</h6><h6>Output:<br>Hi, I'm Sarah and I'm 25 years old.<br>Hi, I'm Mike and I'm 30 years old.</h6><h5>return values</h5>functions can give back (return) a result:<h6>function addNumbers(a, b) {<br>    let result = a + b;<br>    return result;<br>}<br><br>let sum1 = addNumbers(5, 3);<br>let sum2 = addNumbers(10, 20);<br><br>console.log(sum1);<br>console.log(sum2);</h6><h6>Output:<br>8<br>30</h6><h5>arrow functions</h5>JavaScript also has a shorter way to write functions:<h6>// traditional function<br>function multiply(a, b) {<br>    return a * b;<br>}<br><br>// arrow function<br>const multiplyArrow = (a, b) => {<br>    return a * b;<br>};<br><br>// even shorter arrow function<br>const multiplyShort = (a, b) => a * b;<br><br>console.log(multiply(4, 5));<br>console.log(multiplyArrow(4, 5));<br>console.log(multiplyShort(4, 5));</h6><h6>Output:<br>20<br>20<br>20</h6><h5>default parameters</h5>we can give parameters default values:<h6>function greetWithTitle(name, title = \"friend\") {<br>    console.log(`Hello ${title} ${name}!`);<br>}<br><br>greetWithTitle(\"John\");<br>greetWithTitle(\"Jane\", \"Dr.\");</h6><h6>Output:<br>Hello friend John!<br>Hello Dr. Jane!</h6><h5>practical example</h5>let's create a calculator function:<h6>function calculator(num1, num2, operation) {<br>    if (operation === \"add\") {<br>        return num1 + num2;<br>    } else if (operation === \"subtract\") {<br>        return num1 - num2;<br>    } else if (operation === \"multiply\") {<br>        return num1 * num2;<br>    } else if (operation === \"divide\") {<br>        return num1 / num2;<br>    } else {<br>        return \"Invalid operation\";<br>    }<br>}<br><br>let result1 = calculator(10, 5, \"add\");<br>let result2 = calculator(10, 5, \"multiply\");<br><br>console.log(`10 + 5 = ${result1}`);<br>console.log(`10 √ó 5 = ${result2}`);</h6><h6>Output:<br>10 + 5 = 15<br>10 √ó 5 = 50</h6>",
            "cpp": "<h5>creating your first function</h5>let's create a simple function that greets someone:<h6>void greet() {<br>    std::cout &lt;&lt; \"Hello there!\" &lt;&lt; std::endl;<br>}<br><br>int main() {<br>    // call the function<br>    greet();<br>    return 0;<br>}</h6><h6>Output:<br>Hello there!</h6>the structure is:<br>‚Ä¢ return type (void means no return value)<br>‚Ä¢ function name followed by parentheses<br>‚Ä¢ curly braces {} containing the code<br><br><h5>functions with parameters</h5>parameters let us pass information into our functions:<h6>void greetPerson(std::string name) {<br>    std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; std::endl;<br>}<br><br>int main() {<br>    greetPerson(\"Alice\");<br>    greetPerson(\"Bob\");<br>    return 0;<br>}</h6><h6>Output:<br>Hello, Alice!<br>Hello, Bob!</h6><h5>functions with multiple parameters</h5>we can pass multiple pieces of information:<h6>void introduce(std::string name, int age) {<br>    std::cout &lt;&lt; \"Hi, I'm \" &lt;&lt; name &lt;&lt; \" and I'm \" &lt;&lt; age &lt;&lt; \" years old.\" &lt;&lt; std::endl;<br>}<br><br>int main() {<br>    introduce(\"Sarah\", 25);<br>    introduce(\"Mike\", 30);<br>    return 0;<br>}</h6><h6>Output:<br>Hi, I'm Sarah and I'm 25 years old.<br>Hi, I'm Mike and I'm 30 years old.</h6><h5>return values</h5>functions can give back (return) a result:<h6>int addNumbers(int a, int b) {<br>    int result = a + b;<br>    return result;<br>}<br><br>int main() {<br>    int sum1 = addNumbers(5, 3);<br>    int sum2 = addNumbers(10, 20);<br>    <br>    std::cout &lt;&lt; sum1 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; sum2 &lt;&lt; std::endl;<br>    return 0;<br>}</h6><h6>Output:<br>8<br>30</h6><h5>function prototypes</h5>in C++, we often declare functions before main():<h6>// function prototype<br>int multiply(int a, int b);<br>void greet();<br><br>int main() {<br>    greet();<br>    std::cout &lt;&lt; multiply(4, 5) &lt;&lt; std::endl;<br>    return 0;<br>}<br><br>// function definitions<br>void greet() {<br>    std::cout &lt;&lt; \"Hello from C++!\" &lt;&lt; std::endl;<br>}<br><br>int multiply(int a, int b) {<br>    return a * b;<br>}</h6><h6>Output:<br>Hello from C++!<br>20</h6><h5>default parameters</h5>we can give parameters default values (declare in prototype):<h6>void greetWithTitle(std::string name, std::string title = \"friend\");<br><br>int main() {<br>    greetWithTitle(\"John\");<br>    greetWithTitle(\"Jane\", \"Dr.\");<br>    return 0;<br>}<br><br>void greetWithTitle(std::string name, std::string title) {<br>    std::cout &lt;&lt; \"Hello \" &lt;&lt; title &lt;&lt; \" \" &lt;&lt; name &lt;&lt; \"!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>Hello friend John!<br>Hello Dr. Jane!</h6><h5>practical example</h5>let's create a calculator function:<h6>double calculator(double num1, double num2, std::string operation) {<br>    if (operation == \"add\") {<br>        return num1 + num2;<br>    } else if (operation == \"subtract\") {<br>        return num1 - num2;<br>    } else if (operation == \"multiply\") {<br>        return num1 * num2;<br>    } else if (operation == \"divide\") {<br>        return num1 / num2;<br>    } else {<br>        return 0; // error case<br>    }<br>}<br><br>int main() {<br>    double result1 = calculator(10, 5, \"add\");<br>    double result2 = calculator(10, 5, \"multiply\");<br>    <br>    std::cout &lt;&lt; \"10 + 5 = \" &lt;&lt; result1 &lt;&lt; std::endl;<br>    std::cout &lt;&lt; \"10 √ó 5 = \" &lt;&lt; result2 &lt;&lt; std::endl;<br>    return 0;<br>}</h6><h6>Output:<br>10 + 5 = 15<br>10 √ó 5 = 50</h6>"
        }
    },
    {
        "topic": "Control Flow",
        "basic": "control flow is all about making decisions and controlling the order in which our code runs. we've already learned about if statements and loops, but there are more tools to help us control how our programs behave. control flow includes things like breaking out of loops early, skipping iterations, handling multiple conditions efficiently, and managing errors. mastering control flow makes our programs smarter and more robust!",
        "langu": {
            "python": "<h5>break and continue</h5>break stops a loop completely, continue skips to the next iteration:<h6># break example<br>for i in range(10):<br>    if i == 5:<br>        break<br>    print(i)<br><br>print(\"Loop ended early!\")<br><br># continue example<br>for i in range(5):<br>    if i == 2:<br>        continue<br>    print(f\"Number: {i}\")</h6><h6>Output:<br>0<br>1<br>2<br>3<br>4<br>Loop ended early!<br>Number: 0<br>Number: 1<br>Number: 3<br>Number: 4</h6><h5>nested loops with control</h5>break and continue work with nested loops:<h6>for i in range(3):<br>    print(f\"Outer loop: {i}\")<br>    for j in range(3):<br>        if j == 1:<br>            continue<br>        if i == 1 and j == 2:<br>            break<br>        print(f\"  Inner loop: {j}\")</h6><h6>Output:<br>Outer loop: 0<br>  Inner loop: 0<br>  Inner loop: 2<br>Outer loop: 1<br>  Inner loop: 0<br>Outer loop: 2<br>  Inner loop: 0<br>  Inner loop: 2</h6><h5>match statements (Python 3.10+)</h5>match is like a more powerful if-elif chain:<h6>def handle_grade(grade):<br>    match grade:<br>        case \"A\":<br>            return \"Excellent!\"\br>        case \"B\":<br>            return \"Good job!\"\br>        case \"C\":<br>            return \"Not bad!\"\br>        case \"D\":<br>            return \"You can do better!\"\br>        case \"F\":<br>            return \"Study harder!\"\br>        case _:<br>            return \"Invalid grade\"\br><br>print(handle_grade(\"A\"))<br>print(handle_grade(\"C\"))<br>print(handle_grade(\"X\"))</h6><h6>Output:<br>Excellent!<br>Not bad!<br>Invalid grade</h6><h5>try-except for error handling</h5>handle errors gracefully instead of crashing:<h6>def safe_divide(a, b):<br>    try:<br>        result = a / b<br>        return f\"{a} √∑ {b} = {result}\"<br>    except ZeroDivisionError:<br>        return \"Cannot divide by zero!\"<br>    except ValueError:<br>        return \"Invalid input!\"<br><br>print(safe_divide(10, 2))<br>print(safe_divide(10, 0))<br>print(safe_divide(\"hello\", 2))</h6><h6>Output:<br>10 √∑ 2 = 5.0<br>Cannot divide by zero!<br>Invalid input!</h6><h5>logical operators</h5>combine conditions with and, or, not:<h6>age = 20<br>has_license = True<br>has_car = False<br><br>if age >= 18 and has_license:<br>    print(\"Can legally drive!\")<br><br>if has_license or has_car:<br>    print(\"Has some transportation access!\")<br><br>if not has_car:<br>    print(\"Needs to buy a car!\")</h6><h6>Output:<br>Can legally drive!<br>Has some transportation access!<br>Needs to buy a car!</h6><h5>conditional expressions (ternary operator)</h5>short way to write simple if-else:<h6>age = 17<br>status = \"adult\" if age >= 18 else \"minor\"<br>print(f\"You are a {status}\")<br><br># can be used in calculations too<br>score = 85<br>grade = \"Pass\" if score >= 60 else \"Fail\"<br>print(f\"Grade: {grade}\")</h6><h6>Output:<br>You are a minor<br>Grade: Pass</h6><h5>practical example: input validation</h5>combining control flow for robust input handling:<h6>def get_valid_age():<br>    while True:<br>        try:<br>            age = int(input(\"Enter your age: \"))<br>            if age < 0:<br>                print(\"Age cannot be negative!\")<br>                continue<br>            elif age > 150:<br>                print(\"That's too old to be realistic!\")<br>                continue<br>            else:<br>                return age<br>        except ValueError:<br>            print(\"Please enter a valid number!\")<br><br># user_age = get_valid_age()<br># print(f\"Your age is {user_age}\")</h6>This function keeps asking until it gets a valid age!",
            "javascript": "<h5>break and continue</h5>break stops a loop completely, continue skips to the next iteration:<h6>// break example<br>for (let i = 0; i < 10; i++) {<br>    if (i === 5) {<br>        break;<br>    }<br>    console.log(i);<br>}<br>console.log(\"Loop ended early!\");<br><br>// continue example<br>for (let i = 0; i < 5; i++) {<br>    if (i === 2) {<br>        continue;<br>    }<br>    console.log(`Number: ${i}`);<br>}</h6><h6>Output:<br>0<br>1<br>2<br>3<br>4<br>Loop ended early!<br>Number: 0<br>Number: 1<br>Number: 3<br>Number: 4</h6><h5>nested loops with control</h5>break and continue work with nested loops:<h6>for (let i = 0; i < 3; i++) {<br>    console.log(`Outer loop: ${i}`);<br>    for (let j = 0; j < 3; j++) {<br>        if (j === 1) {<br>            continue;<br>        }<br>        if (i === 1 && j === 2) {<br>            break;<br>        }<br>        console.log(`  Inner loop: ${j}`);<br>    }<br>}</h6><h6>Output:<br>Outer loop: 0<br>  Inner loop: 0<br>  Inner loop: 2<br>Outer loop: 1<br>  Inner loop: 0<br>Outer loop: 2<br>  Inner loop: 0<br>  Inner loop: 2</h6><h5>switch statements</h5>switch is like a more organized if-elif chain:<h6>function handleGrade(grade) {<br>    switch (grade) {<br>        case \"A\":<br>            return \"Excellent!\";<br>        case \"B\":<br>            return \"Good job!\";<br>        case \"C\":<br>            return \"Not bad!\";<br>        case \"D\":<br>            return \"You can do better!\";<br>        case \"F\":<br>            return \"Study harder!\";<br>        default:<br>            return \"Invalid grade\";<br>    }<br>}<br><br>console.log(handleGrade(\"A\"));<br>console.log(handleGrade(\"C\"));<br>console.log(handleGrade(\"X\"));</h6><h6>Output:<br>Excellent!<br>Not bad!<br>Invalid grade</h6><h5>try-catch for error handling</h5>handle errors gracefully instead of crashing:<h6>function safeDivide(a, b) {<br>    try {<br>        if (b === 0) {<br>            throw new Error(\"Cannot divide by zero!\");<br>        }<br>        let result = a / b;<br>        return `${a} √∑ ${b} = ${result}`;<br>    } catch (error) {<br>        return error.message;<br>    }<br>}<br><br>console.log(safeDivide(10, 2));<br>console.log(safeDivide(10, 0));<br>console.log(safeDivide(\"hello\", 2));</h6><h6>Output:<br>10 √∑ 2 = 5<br>Cannot divide by zero!<br>hello √∑ 2 = NaN</h6><h5>logical operators</h5>combine conditions with &&, ||, !:<h6>let age = 20;<br>let hasLicense = true;<br>let hasCar = false;<br><br>if (age >= 18 && hasLicense) {<br>    console.log(\"Can legally drive!\");<br>}<br><br>if (hasLicense || hasCar) {<br>    console.log(\"Has some transportation access!\");<br>}<br><br>if (!hasCar) {<br>    console.log(\"Needs to buy a car!\");<br>}</h6><h6>Output:<br>Can legally drive!<br>Has some transportation access!<br>Needs to buy a car!</h6><h5>ternary operator</h5>short way to write simple if-else:<h6>let age = 17;<br>let status = age >= 18 ? \"adult\" : \"minor\";<br>console.log(`You are a ${status}`);<br><br>// can be used in calculations too<br>let score = 85;<br>let grade = score >= 60 ? \"Pass\" : \"Fail\";<br>console.log(`Grade: ${grade}`);</h6><h6>Output:<br>You are a minor<br>Grade: Pass</h6><h5>short-circuit evaluation</h5>logical operators can control execution:<h6>let user = {name: \"Alice\", age: 25};<br><br>// && only runs right side if left is true<br>user.name && console.log(`Hello ${user.name}!`);<br><br>// || provides default values<br>let displayName = user.nickname || user.name || \"Anonymous\";<br>console.log(`Display name: ${displayName}`);<br><br>// nullish coalescing (??) for null/undefined only<br>let count = 0;<br>let displayCount = count ?? \"No count available\";<br>console.log(`Count: ${displayCount}`);</h6><h6>Output:<br>Hello Alice!<br>Display name: Alice<br>Count: 0</h6><h5>practical example: input validation</h5>combining control flow for robust input handling:<h6>function getValidAge() {<br>    while (true) {<br>        let input = prompt(\"Enter your age:\");<br>        <br>        if (input === null) {<br>            console.log(\"Operation cancelled\");<br>            return null;<br>        }<br>        <br>        let age = parseInt(input);<br>        <br>        if (isNaN(age)) {<br>            alert(\"Please enter a valid number!\");<br>            continue;<br>        }<br>        <br>        if (age < 0) {<br>            alert(\"Age cannot be negative!\");<br>            continue;<br>        }<br>        <br>        if (age > 150) {<br>            alert(\"That's too old to be realistic!\");<br>            continue;<br>        }<br>        <br>        return age;<br>    }<br>}<br><br>// let userAge = getValidAge();<br>// console.log(`Your age is ${userAge}`);</h6>This function keeps asking until it gets a valid age!",
            "cpp": "<h5>break and continue</h5>break stops a loop completely, continue skips to the next iteration:<h6>// break example<br>for (int i = 0; i < 10; i++) {<br>    if (i == 5) {<br>        break;<br>    }<br>    std::cout &lt;&lt; i &lt;&lt; std::endl;<br>}<br>std::cout &lt;&lt; \"Loop ended early!\" &lt;&lt; std::endl;<br><br>// continue example<br>for (int i = 0; i < 5; i++) {<br>    if (i == 2) {<br>        continue;<br>    }<br>    std::cout &lt;&lt; \"Number: \" &lt;&lt; i &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>0<br>1<br>2<br>3<br>4<br>Loop ended early!<br>Number: 0<br>Number: 1<br>Number: 3<br>Number: 4</h6><h5>nested loops with control</h5>break and continue work with nested loops:<h6>for (int i = 0; i < 3; i++) {<br>    std::cout &lt;&lt; \"Outer loop: \" &lt;&lt; i &lt;&lt; std::endl;<br>    for (int j = 0; j < 3; j++) {<br>        if (j == 1) {<br>            continue;<br>        }<br>        if (i == 1 && j == 2) {<br>            break;<br>        }<br>        std::cout &lt;&lt; \"  Inner loop: \" &lt;&lt; j &lt;&lt; std::endl;<br>    }<br>}</h6><h6>Output:<br>Outer loop: 0<br>  Inner loop: 0<br>  Inner loop: 2<br>Outer loop: 1<br>  Inner loop: 0<br>Outer loop: 2<br>  Inner loop: 0<br>  Inner loop: 2</h6><h5>switch statements</h5>switch is like a more organized if-else chain:<h6>std::string handleGrade(char grade) {<br>    switch (grade) {<br>        case 'A':<br>            return \"Excellent!\";<br>        case 'B':<br>            return \"Good job!\";<br>        case 'C':<br>            return \"Not bad!\";<br>        case 'D':<br>            return \"You can do better!\";<br>        case 'F':<br>            return \"Study harder!\";<br>        default:<br>            return \"Invalid grade\";<br>    }<br>}<br><br>int main() {<br>    std::cout &lt;&lt; handleGrade('A') &lt;&lt; std::endl;<br>    std::cout &lt;&lt; handleGrade('C') &lt;&lt; std::endl;<br>    std::cout &lt;&lt; handleGrade('X') &lt;&lt; std::endl;<br>    return 0;<br>}</h6><h6>Output:<br>Excellent!<br>Not bad!<br>Invalid grade</h6><h5>try-catch for error handling</h5>handle errors gracefully instead of crashing:<h6>#include &lt;stdexcept&gt;<br><br>std::string safeDivide(double a, double b) {<br>    try {<br>        if (b == 0) {<br>            throw std::runtime_error(\"Cannot divide by zero!\");<br>        }<br>        double result = a / b;<br>        return std::to_string(a) + \" √∑ \" + std::to_string(b) + \" = \" + std::to_string(result);<br>    } catch (const std::exception& e) {<br>        return e.what();<br>    }<br>}<br><br>int main() {<br>    std::cout &lt;&lt; safeDivide(10, 2) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; safeDivide(10, 0) &lt;&lt; std::endl;<br>    return 0;<br>}</h6><h6>Output:<br>10.000000 √∑ 2.000000 = 5.000000<br>Cannot divide by zero!</h6><h5>logical operators</h5>combine conditions with &&, ||, !:<h6>int age = 20;<br>bool hasLicense = true;<br>bool hasCar = false;<br><br>if (age >= 18 && hasLicense) {<br>    std::cout &lt;&lt; \"Can legally drive!\" &lt;&lt; std::endl;<br>}<br><br>if (hasLicense || hasCar) {<br>    std::cout &lt;&lt; \"Has some transportation access!\" &lt;&lt; std::endl;<br>}<br><br>if (!hasCar) {<br>    std::cout &lt;&lt; \"Needs to buy a car!\" &lt;&lt; std::endl;<br>}</h6><h6>Output:<br>Can legally drive!<br>Has some transportation access!<br>Needs to buy a car!</h6><h5>ternary operator</h5>short way to write simple if-else:<h6>int age = 17;<br>std::string status = (age >= 18) ? \"adult\" : \"minor\";<br>std::cout &lt;&lt; \"You are a \" &lt;&lt; status &lt;&lt; std::endl;<br><br>// can be used in calculations too<br>int score = 85;<br>std::string grade = (score >= 60) ? \"Pass\" : \"Fail\";<br>std::cout &lt;&lt; \"Grade: \" &lt;&lt; grade &lt;&lt; std::endl;</h6><h6>Output:<br>You are a minor<br>Grade: Pass</h6><h5>goto (use sparingly!)</h5>goto allows jumping to labeled sections (not recommended for beginners):<h6>int main() {<br>    int choice;<br"
        }
    },
    {
        "topic": "OOP",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Data Structures",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    },
    {
        "topic": "Algorithms",
        "basic": "",
        "langu": {
            "python": "",
            "javascript": "",
            "cpp": ""
        }
    }
]